{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","console","log","this","props","movie","title","url","id","window","location","href","react_default","a","createElement","key","width","src","poster_src","alt","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","_this2","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","event","target","performSearch","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA0BeA,6LAtBPC,QAAQC,IAAI,wBACZD,QAAQC,IAAIC,KAAKC,MAAMC,MAAMC,OAC7B,IAAMC,EAAM,oCAAsCJ,KAAKC,MAAMC,MAAMG,GACnEC,OAAOC,SAASC,KAAOJ,mCAIvB,OAAOK,EAAAC,EAAAC,cAAA,SAAOC,IAAKZ,KAAKC,MAAMC,MAAMG,IAChCI,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,MAAMC,IAAKd,KAAKC,MAAMC,MAAMa,WAAYC,IAAI,YAC3DP,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKX,KAAKC,MAAMC,MAAMC,OACtBM,EAAAC,EAAAC,cAAA,SAAIX,KAAKC,MAAMC,MAAMe,UACrBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASC,QAASnB,KAAKoB,UAAUC,KAAKrB,MAAOsB,MAAM,oBAhBhEC,IAAMC,4BC6FdC,cAzFb,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,KAAMC,KACD+B,MAAQ,GAFIN,6EAqBLO,GAAY,IAAAC,EAAAlC,KACxBF,QAAQC,IAAI,gCACZ,IAAMoC,EAAY,+HAAiIF,EACnJG,IAAEC,KAAK,CACLjC,IAAK+B,EACLG,QAAS,SAACC,GACRzC,QAAQC,IAAI,6BACZ,IAAMyC,EAAUD,EAAcC,QAE1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAACxC,GACfA,EAAMa,WAAa,kDAAoDb,EAAMyC,YAE7E,IAAMC,EAAWnC,EAAAC,EAAAC,cAACkC,EAAD,CAAUjC,IAAKV,EAAMG,GAAIH,MAAOA,IACjDuC,EAAUK,KAAKF,KAGjBV,EAAKa,SAAS,CAAEC,KAAMP,KAGxBQ,MAAO,SAACC,EAAKC,EAAQF,GACnBnD,QAAQC,IAAI,uEAKEqD,GAClBtD,QAAQC,IAAIqD,EAAMC,OAAO/B,OACzB,IACMW,EAAamB,EAAMC,OAAO/B,MADZtB,KAERsD,cAAcrB,oCAK1B,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO4C,UAAU,YACf9C,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,KAAKC,IAAI,WAAWE,IAAI,mBAErCP,EAAAC,EAAAC,cAAA,MAAIE,MAAM,MACVJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCAMRF,EAAAC,EAAAC,cAAA,SAAO6C,MAAO,CACZC,SAAU,GACVC,QAAS,QACT7C,MAAO,MACP8C,WAAY,EACZC,cAAe,EACfC,YAAa,IACZC,SAAU9D,KAAK+D,oBAAoB1C,KAAKrB,MAAOgE,YAAY,oBAAoB9C,KAAK,SAEtFlB,KAAKgC,MAAMgB,aAnFFxB,aCOEyC,QACW,cAA7B3D,OAAOC,SAAS2D,UAEe,UAA7B5D,OAAOC,SAAS2D,UAEhB5D,OAAOC,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c6caeaa8.chunk.js","sourcesContent":["import React from 'react'\n\nclass MovieRow extends React.Component {\n    viewMovie() {\n        console.log('trying to view movie')\n        console.log(this.props.movie.title)\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n        window.location.href = url\n    }\n\n    render() {\n        return <table key={this.props.movie.id}>\n            <tbody>\n                <tr>\n                    <td><img width=\"120\" src={this.props.movie.poster_src} alt=\"poster\" /></td>\n                    <td>\n                        <h3>{this.props.movie.title}</h3>\n                        <p>{this.props.movie.overview}</p>\n                        <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\" />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    }\n}\n\nexport default MovieRow\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MovieRow from './MovieRow'\nimport $ from 'jquery'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    // console.log('this is my initializer')\n\n    // const movies = [\n    //   { id: 0, poster_src: \"https://upload.wikimedia.org/wikipedia/en/0/0d/Avengers_Endgame_poster.jpg\", title: \"Avengers\", overview: \"Esse veniam duis proident ex officia irure commodo excepteur voluptate ipsum. Anim quis deserunt excepteur veniam quis excepteur proident exercitation exercitation quis adipisicing. Commodo cillum irure aute excepteur voluptate. Eu sint id excepteur nostrud cillum cillum. Reprehenderit esse officia laborum velit sunt enim pariatur incididunt commodo ipsum. Velit nulla consequat sit aute labore proident eiusmod aliqua fugiat officia non. Quis laboris nulla irure nisi id culpa non ullamco sint minim proident laboris.\" },\n    //   { id: 1, poster_src: \"https://img06.mgo-images.com/image/thumbnail?id=MMV63AB6961D9B21BCF8CC32B7FDFC3CF074&ql=70&sizes=310x465\", title: \"Robin Hood\", overview: \"Esse veniam duis proident ex officia irure commodo excepteur voluptate ipsum. Anim quis deserunt excepteur veniam quis excepteur proident exercitation exercitation quis adipisicing. Commodo cillum irure aute excepteur voluptate. Eu sint id excepteur nostrud cillum cillum. Reprehenderit esse officia laborum velit sunt enim pariatur incididunt commodo ipsum. Velit nulla consequat sit aute labore proident eiusmod aliqua fugiat officia non. Quis laboris nulla irure nisi id culpa non ullamco sint minim proident laboris.\" }\n    // ]\n\n    //   let movieRows = []\n    //   movies.forEach((movie) => {\n    //     console.log(movie.title)\n    //     const movieRow = <MovieRow movie={movie} />\n    //     movieRows.push(movieRow)\n    //   })\n    //   this.state = { rows: movieRows }\n\n    // this.performSearch(\"hustle\")\n  }\n\n  performSearch(searchTerm) {\n    console.log('perform search using moviedb')\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=9467f9a7dc0cb6861c7460249bf2f7fe&language=en-US&include_adult=false&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log('Fetched data successfully')\n        const results = searchResults.results\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie} />\n          movieRows.push(movieRow)\n        })\n\n        this.setState({ rows: movieRows })\n\n      },\n      error: (xhr, status, error) => {\n        console.log('Failed to fetch data')\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n\n  render() {\n    return (\n      <div >\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img width=\"50\" src=\"icon.png\" alt=\"movie db icon\" />\n              </td>\n              <td width='8' />\n              <td>\n                <h1>MoviesDB Search</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n          fontSize: 24,\n          display: 'block',\n          width: '99%',\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\" type=\"text\" />\n\n        {this.state.rows}\n\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}